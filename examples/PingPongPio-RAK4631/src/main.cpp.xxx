#include <Arduino.h>

#include <SX126x-Arduino.h>
#include <SPI.h>

#include <Adafruit_TinyUSB.h>
// Function declarations
void on_tx_done(void);
void on_rx_done(uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr);
void on_tx_timeout(void);
void on_rx_timeout(void);
void on_rx_error(void);
void on_cad_done(bool cadResult);

// Start BLE if we compile for nRF52
#include <bluefruit.h>
void initBLE();
extern bool bleUARTisConnected;
extern BLEUart bleuart;

// Define LoRa parameters
#define RF_FREQUENCY 868000000	// Hz
#define TX_OUTPUT_POWER 22		// dBm
#define LORA_BANDWIDTH 0		// [0: 125 kHz, 1: 250 kHz, 2: 500 kHz, 3: Reserved]
#define LORA_SPREADING_FACTOR 7 // [SF7..SF12]
#define LORA_CODINGRATE 1		// [1: 4/5, 2: 4/6,  3: 4/7,  4: 4/8]
#define LORA_PREAMBLE_LENGTH 8	// Same for Tx and Rx
#define LORA_SYMBOL_TIMEOUT 0	// Symbols
#define LORA_FIX_LENGTH_PAYLOAD_ON false
#define LORA_IQ_INVERSION_ON false
#define RX_TIMEOUT_VALUE 30000
#define TX_TIMEOUT_VALUE 30000

#define BUFFER_SIZE 64 // Define the payload size here

static RadioEvents_t RadioEvents;
static uint16_t BufferSize = BUFFER_SIZE;
static uint8_t RcvBuffer[BUFFER_SIZE];
static uint8_t TxdBuffer[BUFFER_SIZE];
static bool isMaster = true;
const uint8_t PingMsg[] = "PING";
const uint8_t PongMsg[] = "PONG";

time_t timeToSend;

time_t cadTime;

uint8_t pingCnt = 0;
uint8_t pongCnt = 0;

void setup()
{
	pinMode(LED_BUILTIN, OUTPUT);
	digitalWrite(LED_BUILTIN, LOW);

	// Initialize Serial for debug output
	Serial.begin(115200);

	time_t serial_timeout = millis();
	// On nRF52840 the USB serial is not available immediately
	while (!Serial)
	{
		if ((millis() - serial_timeout) < 5000)
		{
			delay(100);
			digitalWrite(LED_GREEN, !digitalRead(LED_GREEN));
		}
		else
		{
			break;
		}
	}

	Serial.println("=====================================");
	Serial.println("SX126x PingPong test");
	Serial.println("=====================================");

	// Start BLE if we compile for nRF52
	initBLE();

	uint8_t deviceId[8];

	BoardGetUniqueId(deviceId);
	Serial.printf("BoardId: %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\n",
				  deviceId[7],
				  deviceId[6],
				  deviceId[5],
				  deviceId[4],
				  deviceId[3],
				  deviceId[2],
				  deviceId[1],
				  deviceId[0]);

	// Initialize the LoRa chip
	Serial.println("Starting lora_hardware_init");
	uint32_t init_result = 0;

	init_result = lora_rak4630_init();
	Serial.printf("RAK4631 LoRa init %s\r\n", init_result == 0 ? "success" : "failed");

	// Initialize the Radio callbacks
	RadioEvents.TxDone = on_tx_done;
	RadioEvents.RxDone = on_rx_done;
	RadioEvents.TxTimeout = on_tx_timeout;
	RadioEvents.RxTimeout = on_rx_timeout;
	RadioEvents.RxError = on_rx_error;
	RadioEvents.CadDone = on_cad_done;

	// Initialize the Radio
	Radio.Init(&RadioEvents);

	Radio.Sleep(); // Radio.Standby();
	
	// Set Radio channel
	Radio.SetChannel(RF_FREQUENCY);

	// Set Radio TX configuration
	Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
					  LORA_SPREADING_FACTOR, LORA_CODINGRATE,
					  LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
					  true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

	// Set Radio RX configuration
	Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
					  LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
					  LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
					  0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

	// Start LoRa
	Serial.println("Starting Radio.Rx");
	Radio.Rx(RX_TIMEOUT_VALUE);

	timeToSend = millis();
}

void loop()
{
	// We are on FreeRTOS, give other tasks a chance to run
	delay(100);
	yield();
	if ((millis() - timeToSend) > 60000)
	{
		timeToSend = millis();
		Serial.println("No activity, send a packet");
		isMaster = true;
		digitalWrite(LED_BUILTIN, HIGH);

		// Check if our channel is available for sending
		Radio.Sleep();
		Radio.SetCadParams(LORA_CAD_08_SYMBOL, LORA_SPREADING_FACTOR + 13, 10, LORA_CAD_ONLY, 0);
		cadTime = millis();
		Radio.StartCad();
		// Sending next Ping will be started when the channel is free
	}
}

/**@brief Function to be executed on Radio Tx Done event
 */
void on_tx_done(void)
{
	Serial.println("on_tx_done");
	if (bleUARTisConnected)
	{
		bleuart.print("on_tx_done\n");
	}
	Radio.Rx(RX_TIMEOUT_VALUE);
	timeToSend = millis();
}

/**@brief Function to be executed on Radio Rx Done event
 */
void on_rx_done(uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr)
{
	Serial.println("on_rx_done");
	if (bleUARTisConnected)
	{
		bleuart.print("on_rx_done\n");
	}
	delay(10);
	BufferSize = size;
	memcpy(RcvBuffer, payload, BufferSize);

	Serial.printf("RssiValue=%d dBm, SnrValue=%d\n", rssi, snr);

	for (int idx = 0; idx < size; idx++)
	{
		Serial.printf("%02X ", RcvBuffer[idx]);
	}
	Serial.println("");

	if (bleUARTisConnected)
	{
		bleuart.printf("RssiValue=%d dBm, SnrValue=%d\n", rssi, snr);
	}
	digitalWrite(LED_BUILTIN, HIGH);

	if (isMaster == true)
	{
		if (BufferSize > 0)
		{
			if (strncmp((const char *)RcvBuffer, (const char *)PongMsg, 4) == 0)
			{
				Serial.println("Received a PONG in on_rx_done as Master");
				if (bleUARTisConnected)
				{
					bleuart.print("Received a PONG in on_rx_done as Master\n");
				}

				// Wait 500ms before sending the next package
				delay(500);

				// Check if our channel is available for sending
				Radio.Sleep();
				Radio.SetCadParams(LORA_CAD_08_SYMBOL, LORA_SPREADING_FACTOR + 13, 10, LORA_CAD_ONLY, 0);
				cadTime = millis();
				Radio.StartCad();
				// Sending next Ping will be started when the channel is free
			}
			else if (strncmp((const char *)RcvBuffer, (const char *)PingMsg, 4) == 0)
			{ // A master already exists then become a slave
				Serial.println("Received a PING in on_rx_done as Master");
				if (bleUARTisConnected)
				{
					bleuart.print("Received a PING in on_rx_done as Master\n");
				}
				isMaster = false;
				Radio.Rx(RX_TIMEOUT_VALUE);
			}
			else // valid reception but neither a PING or a PONG message
			{	 // Set device as master and start again
				isMaster = true;
				Radio.Rx(RX_TIMEOUT_VALUE);
			}
		}
	}
	else
	{
		if (BufferSize > 0)
		{
			if (strncmp((const char *)RcvBuffer, (const char *)PingMsg, 4) == 0)
			{
				Serial.println("Received a PING in on_rx_done as Slave");
				if (bleUARTisConnected)
				{
					bleuart.print("Received a PING in on_rx_done as Slave\n");
				}

				// Check if our channel is available for sending
				Radio.Sleep();
				Radio.SetCadParams(LORA_CAD_08_SYMBOL, LORA_SPREADING_FACTOR + 13, 10, LORA_CAD_ONLY, 0);
				cadTime = millis();
				Radio.StartCad();
				// Sending Pong will be started when the channel is free
			}
			else // valid reception but not a PING as expected
			{	 // Set device as master and start again
				Serial.println("Received something in on_rx_done as Slave");
				if (bleUARTisConnected)
				{
					bleuart.print("Received something in on_rx_done as Slave\n");
				}
				isMaster = true;
				Radio.Rx(RX_TIMEOUT_VALUE);
			}
		}
	}
	timeToSend = millis();
}

/**@brief Function to be executed on Radio Tx Timeout event
 */
void on_tx_timeout(void)
{
	// Radio.Sleep();
	Serial.println("on_tx_timeout");
	if (bleUARTisConnected)
	{
		bleuart.print("on_tx_timeout\n");
	}
	digitalWrite(LED_BUILTIN, LOW);

	Radio.Rx(RX_TIMEOUT_VALUE);
	timeToSend = millis();
}

/**@brief Function to be executed on Radio Rx Timeout event
 */
void on_rx_timeout(void)
{
	Serial.println("on_rx_timeout");
	if (bleUARTisConnected)
	{
		bleuart.print("on_rx_timeout\n");
	}

	digitalWrite(LED_BUILTIN, LOW);

	if (isMaster == true)
	{
		Serial.println("Master mode, sending PING");
		// Wait 500ms before sending the next package
		delay(500);

		// Check if our channel is available for sending
		Radio.Sleep();
		Radio.SetCadParams(LORA_CAD_08_SYMBOL, LORA_SPREADING_FACTOR + 13, 10, LORA_CAD_ONLY, 0);
		cadTime = millis();
		Radio.StartCad();
		// Sending the ping will be started when the channel is free
	}
	else
	{
		Serial.println("Slave mode, sending PING");
		// No Ping received within timeout, switch to Master
		isMaster = true;
		// Check if our channel is available for sending
		Radio.Sleep();
		Radio.SetCadParams(LORA_CAD_08_SYMBOL, LORA_SPREADING_FACTOR + 13, 10, LORA_CAD_ONLY, 0);
		cadTime = millis();
		Radio.StartCad();
		// Sending the ping will be started when the channel is free
	}
	timeToSend = millis();
}

/**@brief Function to be executed on Radio Rx Error event
 */
void on_rx_error(void)
{
	Serial.println("on_rx_error");
	if (bleUARTisConnected)
	{
		bleuart.print("on_rx_error\n");
	}
	digitalWrite(LED_BUILTIN, LOW);

	if (isMaster == true)
	{
		// Wait 500ms before sending the next package
		delay(500);

		// Check if our channel is available for sending
		Radio.Sleep();
		Radio.SetCadParams(LORA_CAD_08_SYMBOL, LORA_SPREADING_FACTOR + 13, 10, LORA_CAD_ONLY, 0);
		cadTime = millis();
		Radio.StartCad();
		// Sending the ping will be started when the channel is free
	}
	else
	{
		Radio.Rx(RX_TIMEOUT_VALUE);
	}
	timeToSend = millis();
}

/**@brief Function to be executed on CAD Done event
 */
void on_cad_done(bool cadResult)
{
	time_t duration = millis() - cadTime;
	if (cadResult)
	{
		Serial.printf("CAD returned channel busy after %ldms\n", duration);
		if (bleUARTisConnected)
		{
			bleuart.printf("CAD returned channel busy after %ldms\n", duration);
		}
		Radio.Rx(RX_TIMEOUT_VALUE);
	}
	else
	{
		Serial.printf("CAD returned channel free after %ldms\n", duration);
		if (bleUARTisConnected)
		{
			bleuart.printf("CAD returned channel free after %ldms\n", duration);
		}
		if (isMaster)
		{
			Serial.println("Sending a PING in on_cad_done as Master");
			if (bleUARTisConnected)
			{
				bleuart.print("Sending a PING in on_cad_done as Master\n");
			}
			// Send the next PING frame
			TxdBuffer[0] = 'P';
			TxdBuffer[1] = 'I';
			TxdBuffer[2] = 'N';
			TxdBuffer[3] = 'G';
		}
		else
		{
			Serial.println("Sending a PONG in on_cad_done as Slave");
			if (bleUARTisConnected)
			{
				bleuart.print("Sending a PONG in on_cad_done as Slave\n");
			}
			// Send the reply to the PONG string
			TxdBuffer[0] = 'P';
			TxdBuffer[1] = 'O';
			TxdBuffer[2] = 'N';
			TxdBuffer[3] = 'G';
		}
		// We fill the buffer with numbers for the payload
		for (int i = 4; i < BufferSize; i++)
		{
			TxdBuffer[i] = i - 4;
		}

		Radio.Send(TxdBuffer, BufferSize);
	}
	timeToSend = millis();
}
